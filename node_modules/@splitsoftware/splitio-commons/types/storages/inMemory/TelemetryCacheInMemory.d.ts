import { ImpressionDataType, EventDataType, StreamingEvent, Method, OperationType } from '../../sync/submitters/types';
import { TelemetryCacheSync } from '../types';
export declare class TelemetryCacheInMemory implements TelemetryCacheSync {
    private timeUntilReady?;
    getTimeUntilReady(): number | undefined;
    recordTimeUntilReady(ms: number): void;
    private timeUntilReadyFromCache?;
    getTimeUntilReadyFromCache(): number | undefined;
    recordTimeUntilReadyFromCache(ms: number): void;
    private notReadyUsage;
    getNonReadyUsage(): number;
    recordNonReadyUsage(): void;
    private impressionStats;
    getImpressionStats(type: ImpressionDataType): number;
    recordImpressionStats(type: ImpressionDataType, count: number): void;
    private eventStats;
    getEventStats(type: EventDataType): number;
    recordEventStats(type: EventDataType, count: number): void;
    private lastSync;
    getLastSynchronization(): Record<OperationType, number | undefined>;
    recordSuccessfulSync(resource: OperationType, timeMs: number): void;
    private httpErrors;
    popHttpErrors(): Record<OperationType, {
        [statusCode: string]: number;
    }>;
    recordSyncError(resource: OperationType, status: number): void;
    private httpLatencies;
    popHttpLatencies(): Record<OperationType, number[]>;
    recordSyncLatency(resource: OperationType, latencyMs: number): void;
    private authRejections;
    popAuthRejections(): number;
    recordAuthRejections(): void;
    private tokenRefreshes;
    popTokenRefreshes(): number;
    recordTokenRefreshes(): void;
    private streamingEvents;
    popStreamingEvents(): StreamingEvent[];
    recordStreamingEvents(streamingEvent: StreamingEvent): void;
    private tags;
    popTags(): string[];
    addTag(tag: string): void;
    private sessionLength?;
    getSessionLength(): number | undefined;
    recordSessionLength(ms: number): void;
    private exceptions;
    popExceptions(): Record<Method, number>;
    recordException(method: Method): void;
    private latencies;
    popLatencies(): Record<Method, number[]>;
    recordLatency(method: Method, latencyMs: number): void;
}
