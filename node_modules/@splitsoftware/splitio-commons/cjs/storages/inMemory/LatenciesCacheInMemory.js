"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LatenciesCacheInMemory = void 0;
var findLatencyIndex_1 = require("../findLatencyIndex");
var LatenciesCacheInMemory = /** @class */ (function () {
    function LatenciesCacheInMemory() {
        this.counters = {};
    }
    /**
     * Add latencies.
     */
    LatenciesCacheInMemory.prototype.track = function (metricName, latency) {
        // Initialize if needed
        if (this.counters[metricName] === undefined) {
            this.counters[metricName] = [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ];
        }
        // +1 based on the latency number
        this.counters[metricName][(0, findLatencyIndex_1.findLatencyIndex)(latency)]++;
        return true;
    };
    /**
     * Clear the collector
     */
    LatenciesCacheInMemory.prototype.clear = function () {
        this.counters = {};
    };
    /**
     * Get the collected data, used as payload for posting.
     */
    LatenciesCacheInMemory.prototype.state = function () {
        return this.counters;
    };
    /**
     * Check if the cache is empty.
     */
    LatenciesCacheInMemory.prototype.isEmpty = function () {
        return Object.keys(this.counters).length === 0;
    };
    return LatenciesCacheInMemory;
}());
exports.LatenciesCacheInMemory = LatenciesCacheInMemory;
