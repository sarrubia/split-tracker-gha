"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyBuilderSS = void 0;
var tslib_1 = require("tslib");
var KeyBuilder_1 = require("./KeyBuilder");
// NOT USED
// const everythingAfterCount = /count\.([^/]+)$/;
// const latencyMetricNameAndBucket = /latency\.([^/]+)\.bucket\.([0-9]+)$/;
var KeyBuilderSS = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(KeyBuilderSS, _super);
    function KeyBuilderSS(prefix, metadata) {
        var _this = _super.call(this, prefix) || this;
        _this.metadata = metadata;
        return _this;
    }
    KeyBuilderSS.prototype.buildRegisteredSegmentsKey = function () {
        return this.prefix + ".segments.registered";
    };
    KeyBuilderSS.prototype.buildVersionablePrefix = function () {
        return this.prefix + "/" + this.metadata.s + "/" + this.metadata.i;
    };
    KeyBuilderSS.prototype.buildImpressionsKey = function () {
        return this.prefix + ".impressions";
    };
    KeyBuilderSS.prototype.buildEventsKey = function () {
        return this.prefix + ".events";
    };
    KeyBuilderSS.prototype.buildLatencyKeyPrefix = function () {
        return this.buildVersionablePrefix() + "/latency";
    };
    KeyBuilderSS.prototype.buildLatencyKey = function (metricName, bucketNumber) {
        return this.buildLatencyKeyPrefix() + "." + metricName + ".bucket." + bucketNumber;
    };
    KeyBuilderSS.prototype.buildCountKey = function (metricName) {
        return this.buildVersionablePrefix() + "/count." + metricName;
    };
    // NOT USED
    // buildGaugeKey(metricName: string) {
    //   return `${this.buildVersionablePrefix()}/gauge.${metricName}`;
    // }
    // NOT USED
    // searchPatternForCountKeys() {
    //   return `${this.buildVersionablePrefix()}/count.*`;
    // }
    KeyBuilderSS.prototype.searchPatternForSplitKeys = function () {
        return this.buildSplitKeyPrefix() + "*";
    };
    return KeyBuilderSS;
}(KeyBuilder_1.KeyBuilder));
exports.KeyBuilderSS = KeyBuilderSS;
